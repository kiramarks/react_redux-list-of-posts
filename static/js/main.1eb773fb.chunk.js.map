{"version":3,"sources":["redux/selectors.ts","redux/store/loading.ts","redux/store/posts.ts","helpers/api.ts","redux/store/error.ts","redux/store/initialized.ts","redux/store/query.ts","redux/store/index.ts","components/Search.tsx","helpers/debounce.ts","components/User.tsx","components/Comment.tsx","components/CommentList.tsx","components/Post.tsx","components/PostsList.tsx","App.tsx","index.tsx"],"names":["getLoading","state","isLoading","getPosts","posts","getError","hasError","getInitialized","isInitialized","getQuery","query","loadingReducer","loading","action","type","setPosts","postsReducer","map","post","id","postId","comments","filter","comment","commentId","API_URL","fetchPreparedPosts","a","Promise","all","fetch","then","response","json","users","preparedPosts","user","find","userId","setError","value","errorReducer","error","initializedReducer","queryReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Search","handleSearch","useSelector","className","onChange","htmlFor","debounce","f","delay","timer","args","clearTimeout","setTimeout","User","name","email","address","href","street","suite","city","Comment","body","dispatch","useDispatch","handleDeleteComment","useCallback","deleteComment","onClick","CommentList","item","key","Post","title","handleDeletePost","PostsList","useState","filteredQuery","setFilteredQuery","visiblePosts","useMemo","toLowerCase","includes","setFilteredQueryWithDebounce","e","target","App","loadData","isButtonVisible","shouldPostsRender","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1eb773fb.chunk.js","sourcesContent":["import { RootState } from './store';\n\nexport const getLoading = (state: RootState) => state.isLoading;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getError = (state: RootState) => state.hasError;\nexport const getInitialized = (state: RootState) => state.isInitialized;\nexport const getQuery = (state: RootState) => state.query;\n","import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst loadingReducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\nconst DELETE_POST = 'DELETE_POST';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const setPosts = (posts: []) => ({ type: SET_POSTS, posts });\n\nexport const deletePost = (postId: number) => ({\n  type: DELETE_POST,\n  postId,\n});\n\nexport const deleteComment = (postId: number, commentId: number) => ({\n  type: DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nconst postsReducer = (posts: Post[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case DELETE_COMMENT:\n      return posts.map(post => (\n        post.id === action.postId\n          ? {\n            ...post,\n            comments: post.comments\n              .filter(comment => comment.id !== action.commentId),\n          } : post));\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.postId);\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","const API_URL = 'https://jsonplaceholder.typicode.com';\n\nconst fetchPosts = () => {\n  return fetch(`${API_URL}/posts`)\n    .then(response => response.json());\n};\n\nconst fetchUsers = () => {\n  return fetch(`${API_URL}/users`)\n    .then(response => response.json());\n};\n\nconst fetchComments = () => {\n  return fetch(`${API_URL}/comments`)\n    .then(response => response.json());\n};\n\nexport const fetchPreparedPosts = async () => {\n  const [posts, users, comments] = await Promise.all(\n    [fetchPosts(), fetchUsers(), fetchComments()],\n  );\n\n  const preparedPosts = posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }));\n\n  return preparedPosts;\n};\n","import { AnyAction } from 'redux';\n\nconst SET_ERROR = 'SET_ERROR';\n\nexport const setError = (value: boolean) => ({\n  type: SET_ERROR,\n  value,\n});\n\nconst errorReducer = (error = false, action: AnyAction) => {\n  switch (action.type) {\n    case SET_ERROR:\n      return action.value;\n    default:\n      return error;\n  }\n};\n\nexport default errorReducer;\n","import { AnyAction } from 'redux';\n\nconst SET_INITIALIZED = 'SET_INITIALIZED';\n\nexport const setInitialized = (value: boolean) => ({\n  type: SET_INITIALIZED,\n  value,\n});\n\nconst initializedReducer = (error = false, action: AnyAction) => {\n  switch (action.type) {\n    case SET_INITIALIZED:\n      return action.value;\n    default:\n      return error;\n  }\n};\n\nexport default initializedReducer;\n","import { AnyAction } from 'redux';\n\nconst SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY,\n  query,\n});\n\nconst queryReducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n    default:\n      return query;\n  }\n};\n\nexport default queryReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport postsReducer, { setPosts } from './posts';\nimport { fetchPreparedPosts } from '../../helpers/api';\nimport errorReducer, { setError } from './error';\nimport initializedReducer, { setInitialized } from './initialized';\nimport queryReducer from './query';\n\nconst rootReducer = combineReducers({\n  isLoading: loadingReducer,\n  posts: postsReducer,\n  hasError: errorReducer,\n  isInitialized: initializedReducer,\n  query: queryReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n\nexport const loadPosts = () => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(setError(false));\n    dispatch(startLoading());\n\n    try {\n      const posts = await fetchPreparedPosts();\n\n      dispatch(setPosts(posts));\n    } catch (error) {\n      dispatch(setError(true));\n    }\n\n    dispatch(finishLoading());\n    dispatch(setInitialized(true));\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getQuery } from '../redux/selectors';\n\nexport const Search = ({ handleSearch }: SearchProps) => {\n  const query = useSelector(getQuery);\n\n  return (\n    <div className=\"row\">\n      <form className=\"col s12\">\n        <div className=\"row\">\n          <div className=\"input-field col s12\">\n            <textarea\n              id=\"textarea1\"\n              value={query}\n              className=\"materialize-textarea\"\n              onChange={handleSearch}\n            />\n            <label htmlFor=\"textarea1\">\n              Type something to search post...\n            </label>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n","function debounce<Params extends any[]>(\n  f: (...args: Params) => any,\n  delay: number,\n): (...args: Params) => void {\n  let timer: NodeJS.Timeout;\n\n  return (...args: Params) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      f(...args);\n    }, delay);\n  };\n}\n\nexport default debounce;\n","import React from 'react';\n\nexport const User = ({ name, email, address }: User) => {\n  return (\n    <section className=\"user post__user\">\n      <p className=\"user__name\">{name}</p>\n      <a href={`mailto:${email}`} className=\"user__email\">\n        {email}\n      </a>\n      <address className=\"user__address\">\n        <div>{`${address.street}, ${address.suite}`}</div>\n        <div>{address.city}</div>\n      </address>\n    </section>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteComment } from '../redux/store/posts';\n\nexport const Comment = ({\n  id, name, body, email, postId,\n}: CommentProps) => {\n  const dispatch = useDispatch();\n  const handleDeleteComment = useCallback(() => dispatch(deleteComment(postId, id)),\n    [dispatch, postId, id]);\n\n  return (\n    <section className=\"post__comment\">\n      <span\n        className=\"comment__delete\"\n        onClick={handleDeleteComment}\n      >\n        Delete comment\n      </span>\n      <p className=\"comment__name\">{name}</p>\n      <p className=\"comment__body\">{body}</p>\n      <a href={`mailto:${email}`} className=\"comment__email\">\n        {email}\n      </a>\n    </section>\n  );\n};\n","import React from 'react';\nimport { Comment } from './Comment';\n\nexport const CommentList = ({ comments, postId }: CommentsProps) => {\n  return (\n    <>\n      <p className=\"comment__heading\">Comments</p>\n      {comments.map((item) => <Comment key={item.id} {...item} postId={postId} />)}\n    </>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deletePost } from '../redux/store/posts';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\n\nexport const Post = ({\n  id, title, user, body, comments,\n}: Post) => {\n  const dispatch = useDispatch();\n  const handleDeletePost = useCallback(() => dispatch(deletePost(id)),\n    [dispatch, id]);\n\n  return (\n    <section className=\"post\">\n      <h5 className=\"post__title\">{title}</h5>\n      <span\n        className=\"post__delete\"\n        onClick={handleDeletePost}\n      >\n        Delete post\n      </span>\n      <p className=\"post__body\">{body}</p>\n      <User {...user} />\n      <CommentList comments={comments} postId={id} />\n    </section>\n  );\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Search } from './Search';\nimport debounce from '../helpers/debounce';\nimport { setQuery } from '../redux/store/query';\nimport { Post } from './Post';\n\nexport const PostsList = ({ posts }: PostsListProps) => {\n  const [filteredQuery, setFilteredQuery] = useState('');\n  const dispatch = useDispatch();\n\n  const visiblePosts = useMemo(() => {\n    return posts.filter(post => {\n      const title = post.title.toLowerCase();\n      const body = post.body.toLowerCase();\n\n      return (title + body).includes(filteredQuery.toLowerCase());\n    });\n  }, [posts, filteredQuery]);\n\n  const setFilteredQueryWithDebounce = useCallback(\n    debounce(setFilteredQuery, 1000),\n    [],\n  );\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    dispatch(setQuery(e.target.value));\n    setFilteredQueryWithDebounce(e.target.value);\n  }, [dispatch, setFilteredQueryWithDebounce]);\n\n\n  return (\n    <>\n      <Search handleSearch={handleSearch} />\n      <article className=\"app__post-list\">\n        {visiblePosts.map((post) => <Post key={post.id} {...post} />)}\n      </article>\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.scss';\n\nimport {\n  getLoading, getPosts, getError, getInitialized,\n} from './redux/selectors';\nimport { loadPosts } from './redux/store';\nimport { PostsList } from './components/PostsList';\n\nconst App = () => {\n  const isLoading = useSelector(getLoading);\n  const isInitialized = useSelector(getInitialized);\n  const posts = useSelector(getPosts);\n  const hasError = useSelector(getError);\n  const dispatch = useDispatch();\n\n  const loadData = () => {\n    dispatch(loadPosts());\n  };\n\n  const isButtonVisible = useMemo(() => !isLoading && !isInitialized,\n    [isLoading, isInitialized]);\n  const shouldPostsRender = useMemo(() => !hasError && !isLoading && isInitialized,\n    [hasError, isLoading, isInitialized]);\n\n  return (\n    <main className=\"app\">\n      <div className=\"app__header\">\n        <h2 className=\"app__heading\">Dynamic list of posts</h2>\n        {isButtonVisible\n        && (\n          <button\n            type=\"button\"\n            className=\"waves-effect waves-light btn deep-purple accent-3\"\n            onClick={loadData}\n          >\n            load data\n          </button>\n        )}\n        {isLoading && <p>Loading...</p>}\n        {hasError && (\n          <button\n            type=\"button\"\n            className=\"waves-effect waves-light btn deep-purple accent-3\"\n            onClick={loadData}\n          >\n            try again\n          </button>\n        )}\n      </div>\n      {shouldPostsRender && <PostsList posts={posts} />}\n    </main>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './redux/store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}