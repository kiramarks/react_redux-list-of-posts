{"version":3,"sources":["store/loading.ts","store/posts.ts","api/posts.ts","store/error.ts","store/initialized.ts","store/query.ts","store/index.ts","components/User.tsx","components/CommentList.tsx","components/Search.tsx","helpers/debounce.ts","components/PostsList.tsx","App.tsx","index.tsx"],"names":["loadingReducer","loading","action","type","setPosts","posts","postsReducer","map","post","id","postId","comments","filter","comment","commentId","API_URL","fetchPreparedPosts","a","Promise","all","fetch","mode","then","response","json","users","preparedPosts","user","find","userId","setError","value","errorReducer","error","initializedReducer","queryReducer","query","rootReducer","combineReducers","isLoading","hasError","isInitialized","state","getPosts","getError","getInitialized","getQuery","store","createStore","composeWithDevTools","applyMiddleware","thunk","User","name","email","address","className","href","street","suite","city","CommentList","dispatch","useDispatch","body","key","onClick","deleteComment","Search","handleSearch","useSelector","onChange","event","htmlFor","debounce","f","delay","timer","args","clearTimeout","setTimeout","PostsList","useState","filteredQuery","setFilteredQuery","visiblePosts","useMemo","title","toLowerCase","includes","setFilteredQueryWithDebounce","useCallback","e","target","App","initialized","loadData","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70b89a5d.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst loadingReducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\nconst DELETE_POST = 'DELETE_POST';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const setPosts = (posts: []) => ({ type: SET_POSTS, posts });\n\nexport const deletePost = (postId: number) => ({\n  type: DELETE_POST,\n  postId,\n})\n\nexport const deleteComment = (postId: number, commentId: number) => ({\n  type: DELETE_COMMENT,\n  postId,\n  commentId,\n})\n\nconst postsReducer = (posts: Post[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case DELETE_COMMENT:\n      return posts.map(post => (\n        post.id === action.postId\n        ? {\n          ...post,\n          comments: post.comments\n            .filter(comment => comment.id !== action.commentId),\n        } : post)\n      );\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.postId)\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","const API_URL = 'https://jsonplaceholder.typicode.com';\n\nconst fetchPosts = () => {\n  return fetch(`${API_URL}/posts`, { mode: 'no-cors'})\n    .then(response => response.json());\n};\n\nconst fetchUsers = () => {\n  return fetch(`${API_URL}/users`, { mode: 'no-cors'})\n    .then(response => response.json());\n};\n\nconst fetchComments = () => {\n  return fetch(`${API_URL}/comments`, { mode: 'no-cors'})\n    .then(response => response.json());\n};\n\nexport const fetchPreparedPosts = async () => {\n  const [posts, users, comments] = await Promise.all(\n    [fetchPosts(), fetchUsers(), fetchComments()],\n  );\n\n  const preparedPosts = posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }));\n\n  return preparedPosts;\n};\n","import { AnyAction } from 'redux';\n\nconst SET_ERROR = 'SET_ERROR';\n\nexport const setError = (value: boolean) => ({\n  type: SET_ERROR,\n  value,\n});\n\nconst errorReducer = (error = false, action: AnyAction) => {\n  switch (action.type) {\n    case SET_ERROR:\n      return action.value;\n    default:\n      return error;\n  }\n}\n\nexport default errorReducer;\n","import { AnyAction } from 'redux';\n\nconst SET_INITIALIZED = 'SET_INITIALIZED';\n\nexport const setInitialized = (value: boolean) => ({\n  type: SET_INITIALIZED,\n  value,\n});\n\nconst initializedReducer = (error = false, action: AnyAction) => {\n  switch (action.type) {\n    case SET_INITIALIZED:\n      return action.value;\n    default:\n      return error;\n  }\n}\n\nexport default initializedReducer;\n","import { AnyAction } from 'redux';\n\nconst SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY,\n  query,\n})\n\nconst queryReducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n    default:\n      return query;\n  }\n}\n\nexport default queryReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport postsReducer, { setPosts } from './posts';\nimport { fetchPreparedPosts } from '../api/posts';\nimport errorReducer, { setError } from './error';\nimport initializedReducer, { setInitialized } from './initialized';\nimport queryReducer from './query';\n\nconst rootReducer = combineReducers({\n  isLoading: loadingReducer,\n  posts: postsReducer,\n  hasError: errorReducer,\n  isInitialized: initializedReducer,\n  query: queryReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.isLoading;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getError = (state: RootState) => state.hasError;\nexport const getInitialized = (state: RootState) => state.isInitialized;\nexport const getQuery = (state: RootState) => state.query;\n\nexport const loadPosts = () => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(setError(false));\n    dispatch(startLoading());\n\n    try {\n      const posts = await fetchPreparedPosts();\n\n      dispatch(setPosts(posts));\n    } catch (error) {\n      dispatch(setError(true));\n    }\n\n    dispatch(finishLoading());\n    dispatch(setInitialized(true));\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React, { FC } from 'react';\n\nexport const User: FC<User> = ({ name, email, address }) => {\n  return (\n    <section className=\"user post__user\">\n      <p className=\"user__name\">{name}</p>\n      <a href={`mailto:${email}`} className=\"user__email\">\n        {email}\n      </a>\n      <address className=\"user__address\">\n        <div>{`${address.street}, ${address.suite}`}</div>\n        <div>{address.city}</div>\n      </address>\n    </section>\n  );\n};\n","import React from 'react';\nimport { deleteComment } from '../store/posts';\nimport { useDispatch } from 'react-redux';\n\nexport const CommentList = ({ comments, postId }: CommentsProps) => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      {comments.map(({\n                       id, name, body, email,\n                     }) => (\n        <section className=\"post__comment\" key={id}>\n          <span\n            className=\"comment__delete\"\n            onClick={() => dispatch(deleteComment(postId, id))}\n          >\n            Delete comment\n          </span>\n          <p className=\"comment__name\">{name}</p>\n          <p className=\"comment__body\">{body}</p>\n          <a href={`mailto:${email}`} className=\"comment__email\">\n            {email}\n          </a>\n        </section>\n      ))}\n    </>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getQuery } from '../store';\n\nexport const Search = ({ handleSearch }: SearchProps) => {\n  const query = useSelector(getQuery);\n\n  return (\n    <div className=\"row\">\n      <form className=\"col s12\">\n        <div className=\"row\">\n          <div className=\"input-field col s12\">\n            <textarea\n              id=\"textarea1\"\n              value={query}\n              className=\"materialize-textarea\"\n              onChange={(event) => handleSearch(event)}\n            />\n            <label htmlFor=\"textarea1\">\n              Type something to search post...\n            </label>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n","function debounce<Params extends any[]>(\n  f: (...args: Params) => any,\n  delay: number,\n): (...args: Params) => void {\n  let timer: NodeJS.Timeout;\n\n  return (...args: Params) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      f(...args);\n    }, delay);\n  };\n}\n\nexport default debounce;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\nimport { Search } from './Search';\nimport debounce from '../helpers/debounce';\nimport { setQuery } from '../store/query';\nimport { useDispatch } from 'react-redux';\nimport { deletePost } from '../store/posts';\n\nexport const PostsList = ({ posts }: PostsListProps) => {\n  const [filteredQuery, setFilteredQuery] = useState('');\n  const dispatch = useDispatch();\n\n  const visiblePosts = useMemo(() => {\n    const filteredPosts = [...posts].filter(post => {\n      const title = post.title.toLowerCase();\n      const body = post.body.toLowerCase();\n\n      return (title + body).includes(filteredQuery.toLowerCase());\n    });\n\n    return filteredPosts;\n  }, [posts, filteredQuery]);\n\n  const setFilteredQueryWithDebounce = useCallback(\n    debounce(setFilteredQuery, 1000),\n    [],\n  );\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n\n    dispatch(setQuery(e.target.value));\n    setFilteredQueryWithDebounce(e.target.value);\n  }, [dispatch, setFilteredQueryWithDebounce]);\n  return (\n    <>\n      <Search handleSearch={handleSearch} />\n      <article className=\"app__post-list\">\n        {visiblePosts.map(({\n          id, title, user, body, comments,\n        }) => (\n          <section className=\"post\" key={id}>\n            <h5 className=\"post__title\">{title}</h5>\n            <span className=\"post__delete\"\n                  onClick={() => dispatch(deletePost(id))}\n            >\n              Delete post\n            </span>\n            <p className=\"post__body\">{body}</p>\n            <User {...user} />\n            <p className=\"comment__heading\">Comments</p>\n            <CommentList comments={comments} postId={id}/>\n          </section>\n        ))}\n      </article>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.scss';\n\nimport { isLoading, getPosts, getError, getInitialized, loadPosts } from './store';\nimport { PostsList } from './components/PostsList';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const initialized = useSelector(getInitialized);\n  const posts = useSelector(getPosts);\n  const error = useSelector(getError);\n  const dispatch = useDispatch();\n\n  const loadData = () => {\n    dispatch(loadPosts())\n  };\n\n  return (\n    <main className=\"app\">\n      <div className=\"app__header\">\n        <h2 className=\"app__heading\">Dynamic list of posts</h2>\n        {!loading && !initialized\n        && (\n          <button\n            type=\"button\"\n            className=\"waves-effect waves-light btn deep-purple accent-3\"\n            onClick={loadData}\n          >\n            load data\n          </button>\n        )}\n        {loading && <p>Loading...</p>}\n        {error && (\n          <button\n            type=\"button\"\n            className=\"waves-effect waves-light btn deep-purple accent-3\"\n            onClick={loadData}\n          >\n            try again\n          </button>\n        )}\n      </div>\n      {!error && !loading && initialized && <PostsList posts={posts} />}\n    </main>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}